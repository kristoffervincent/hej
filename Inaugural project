import numpy as np

# autoreload modules when code is run
%load_ext autoreload
%autoreload 2

# Question 1)
#1.1. Define value of variables
money = 1 #m
v = 10 #v
frisch = 0.3 #epsilon
ltax = 0.4 #tau_0
ttax = 0.1 #tau_1
cutoff = 0.4 #kappa
w = 0.5 #w set with an initial value

# Labour utility and budget constraint
#1.2. Define utility as a function of labour supply and consumption
def labour_utility(l,c,frisch,v):
    u = np.log(c) - v*l**(1 + 1/frisch)/(1 + 1/frisch)
    return u

#1.3. Define budget constraint; feasible consumption given labour supply and wage
def budget_constraint(money,w,l,ltax,ttax,cutoff):
    budget = money + w*l - w*l*ltax - ttax*max((w*l - cutoff),0)
    return budget
    
    
    
from scipy import optimize

#1.4. Objective function returning negative utility, to minimize
def value_of_choice_budget(l,w,frisch,v,ltax,ttax,cutoff):
    c = budget_constraint(money,w,l,ltax,ttax,cutoff)
    return -labour_utility(l,c,frisch,v)

#1.5.1. Call the solver given the target from 1.4 and the constraint from 1.3.
def optimiser(w,frisch,v,ltax,ttax,cutoff,money):
    sol_case1 = optimize.minimize_scalar(
        value_of_choice_budget, method = 'bounded',
        bounds=(0,1), args = (w,frisch,v,ltax,ttax,cutoff))
    """ Solving the agent's problem of optimal labour supply and consumption.
    
    Args:
    
        w (float): Individual wage
        frisch (float): Frisch elasticity of labour supply
        v (float): Disutility of labour multiplier
        ltax (float): lower tax rate
        ttax (float): additional upper tax rate
        cutoff (float): cutoff between lower and upper tax rate
        money (float): initial money endowment
        
    Returns:
    
        (list): Optimal labour supply, feasible consumption, utility level from the two former
    
    """

#1.5.2. Unpack optimal labour supply, then return feasible consumption and implied individual utility
    lstar = sol_case1.x
    cstar = budget_constraint(money,w,lstar,ltax,ttax,cutoff)
    ustar = labour_utility(lstar,cstar,frisch,v)
    return [lstar,cstar,ustar] 
    
    
# Question 2

import matplotlib.pyplot as plt
plt.style.use("seaborn")

#2.1. Set number of observations
N=1000

#2.2.1. Generate vectors of optimal labour supply and feasible consumption given wage.
w_vec=np.linspace(0.5,1.5,N)
l_vec=np.empty(N)
c_vec=np.empty(N)
for i,w in enumerate(w_vec):
    l_c_bundle=optimiser(w,frisch,v,ltax,ttax,cutoff,money)
    #2.2.2. As the optimiser function returns a list of optimal labour supply and feasible consumption,
            #extract the relevant results. Copy them to the list of labour supply and consupmtion.
    l_vec[i]=l_c_bundle[0]
    c_vec[i]=l_c_bundle[1]

#2.3.1 Create the figure
fig = plt.figure(figsize=(10,4))

#2.3.2. Left plot; labour supply
ax_left = fig.add_subplot(1,2,1)
ax_left.plot(w_vec,l_vec)

ax_left.set_title('Optimal labour supply given wage')
ax_left.set_xlabel('$w$')
ax_left.set_ylabel('$l^\star$')
ax_left.grid(True)

#2.3.3. right plot; feasible consumption
ax_right = fig.add_subplot(1,2,2)
ax_right.plot(w_vec,c_vec)

ax_right.set_title('Optimal consumption given wage')
ax_right.set_xlabel('$w$')
ax_right.set_ylabel('$c^\star$')
ax_right.grid(True)
